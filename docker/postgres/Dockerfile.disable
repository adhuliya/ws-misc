#
# example Dockerfile for https://docs.docker.com/engine/examples/postgresql_service/
#

FROM ubuntu:18.04

RUN apt-get update;
RUN apt-get install -y gnupg2 wget;

# REF: https://www.postgresql.org/download/linux/ubuntu/
RUN sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt bionic-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
RUN apt-get update
# RUN apt-get install -y postgresql-client-12 postgresql-12 postgresql-contrib-9.6 libpq-dev postgresql-server-dev-12 pgadmin4;
RUN apt-get install -y postgresql-client-12 postgresql-12 postgresql-contrib-9.6;


# Run the rest of the commands as the ``postgres`` user created by the ``postgres-11.1`` package when it was ``apt-get installed``
USER postgres

# Create a PostgreSQL role named ``docker`` with ``docker`` as the password and
# then create a database `docker` owned by the ``docker`` role.
# Note: here we use ``&&\`` to run commands one after the other - the ``\``
#       allows the RUN command to span multiple lines.
RUN    /etc/init.d/postgresql start &&\
    psql --command "CREATE USER docker WITH SUPERUSER PASSWORD 'docker';" &&\
    createdb -O docker docker

# Adjust PostgreSQL configuration so that remote connections to the
# database are possible.
RUN echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/11.1/main/pg_hba.conf

# And add ``listen_addresses`` to ``/etc/postgresql/11.1/main/postgresql.conf``
RUN echo "listen_addresses='*'" >> /etc/postgresql/11.1/main/postgresql.conf

# Expose the PostgreSQL port
EXPOSE 5432

# Add VOLUMEs to allow backup of config, logs and databases
VOLUME  ["/etc/postgresql", "/var/log/postgresql", "/var/lib/postgresql"]

# Set the default command to run when starting the container
CMD ["/usr/lib/postgresql/11.1/bin/postgres", "-D", "/var/lib/postgresql/11.1/main", "-c", "config_file=/etc/postgresql/11.1/main/postgresql.conf"]


